//
// BSONWriter.cpp
//
// $Id$
//
// Library: MongoDB
// Package: MongoDB
// Module:  BSONWriter
//
// Implementation of the BSONWriter class.
//
// Copyright (c) 2012, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#include <sstream>

#include "Poco/MongoDB/BSONWriter.h"

namespace Poco {
namespace MongoDB {

BSONWriter::BSONWriter(Poco::BinaryWriter& writer) : _writer(writer)
{
}

BSONWriter::~BSONWriter()
{
}

void BSONWriter::write(const Document& doc)
{
	if ( doc.empty() )
	{
		_writer << 5;
	}
	else
	{
		std::stringstream sstream;
		Poco::BinaryWriter tempWriter(sstream);
		for(Document::ConstIterator it = doc.begin(); it != doc.end(); ++it)
		{
			const Dynamic::Var& element = it->second;
			if ( element.isEmpty() )
			{
				tempWriter << (unsigned char) 0x0A;
				BSONWriter(tempWriter).writeCString(it->first);
			}
			else if ( element.isNumeric() )
			{
				if ( element.isInteger() )
				{
					tempWriter << (unsigned char) 0x10;
					BSONWriter(tempWriter).writeCString(it->first);
					tempWriter << (Int32) element;
				}
				else
				{
					tempWriter << (unsigned char) 0x01;
					BSONWriter(tempWriter).writeCString(it->first);
					tempWriter << (double) element;
				}
			}
			else if ( element.isString() )
			{
				tempWriter << (unsigned char) 0x02;
				BSONWriter(tempWriter).writeCString(it->first);
				const std::string& s = element.extract<std::string>();
				tempWriter << (Poco::Int32) (s.length() + 1);
				BSONWriter(tempWriter).writeCString(s);
			}
			else if ( element.isStruct() )
			{
				tempWriter << (unsigned char) 0x03;
				BSONWriter(tempWriter).writeCString(it->first);
				BSONWriter(tempWriter).write(element.extract<Document>());
			}
			else if ( element.isArray() ) // TODO
			{

			}
			else if ( element.type() == typeid(bool) )
			{
				tempWriter << (unsigned char) 0x08;
				BSONWriter(tempWriter).writeCString(it->first);
				tempWriter << (element.extract<bool>() ? 0x01 : 0x00);
			}
			else if ( element.type() == typeid(DateTime) )
			{

			}
		}
		tempWriter.flush();

		Poco::Int32 len = 5 + sstream.tellp(); /* 5 = sizeof(len) + 0-byte */
		_writer << len;
		_writer.writeRaw(sstream.str());
	}
	_writer << '\0';
}

void BSONWriter::writeCString(const std::string& value)
{
	_writer.writeRaw(value);
	_writer << (unsigned char) 0x00;
}

}} // Namespace Poco::MongoDB

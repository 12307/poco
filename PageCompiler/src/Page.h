//
// Page.h
//
// $Id: //poco/Main/PageCompiler/src/Page.h#1 $
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Page_INCLUDED
#define Page_INCLUDED


#include "Poco/Net/NameValueCollection.h"
#include <vector>
#include <istream>
#include <ostream>


class Page: public Poco::Net::NameValueCollection
	/// This class represents a server page consisting of
	/// handler code and declarations, as well as page attributes.
{
public:
	Page(const std::string& basePath);
		/// Creates a Page.
	
	~Page();
		/// Destroys the Page.

	const std::string& headerDecls() const;
		/// Returns the user-specified declarations for the header file.

	const std::string& implDecls() const;
		/// Returns the user-specified declarations for the source file.

	const std::string& handler() const;
		/// Returns the request handler code.

	void parse(std::istream& istr);	
		/// Parses a HTML file containing server page directives.

protected:
	enum ParsingState
	{
		STATE_MARKUP,
		STATE_IMPLDECL,
		STATE_HDRDECL,
		STATE_BLOCK,
		STATE_EXPR,
		STATE_COMMENT,
		STATE_ATTR
	};

	virtual void handleAttribute(const std::string& name, const std::string& value, std::ostream& handlerStream);
	void include(const std::string& path, std::ostream& handlerStream);
	void parse(std::istream& pageStream, std::ostream& handlerStream);
	void addHeaderDecls(const std::string& decls);
	void addImplDecls(const std::string& decls);
	void addAttrs(const std::string& attrs);
	void parseAttributes(std::ostream& handlerStream);
	void nextToken(std::istream& istr, std::string& token);
	std::string where();

	static const std::string MARKUP_BEGIN;
	static const std::string MARKUP_END;
	static const std::string EXPR_BEGIN;
	static const std::string EXPR_END;

private:
	std::string _headerDecls;
	std::string _implDecls;
	std::string _handler;
	std::string _attrs;
	std::vector<std::string> _paths;
};


//
// inlines
//
inline const std::string& Page::headerDecls() const
{
	return _headerDecls;
}


inline const std::string& Page::implDecls() const
{
	return _implDecls;
}


inline const std::string& Page::handler() const
{
	return _handler;
}


#endif // Page_INCLUDED

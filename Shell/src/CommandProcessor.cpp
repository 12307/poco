//
// CommandProcessor.cpp
//
// $Id: //poco/1.4/Shell/src/CommandProcessor.cpp#1 $
//
// Library: Shell
// Package: Shell
// Module:  CommandProcessor
//
// Copyright (c) 2009-2013, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Shell/CommandProcessor.h"
#include "Poco/Shell/Command.h"
#include "Poco/Shell/Session.h"


using Poco::FastMutex;


namespace Poco {
namespace Shell {


const std::string CommandProcessor::COMMAND_LOGIN("login");
const std::string CommandProcessor::COMMAND_HELP("help");
const std::string CommandProcessor::COMMAND_QUIT("quit");


CommandProcessor::CommandProcessor()
{
}


CommandProcessor::~CommandProcessor()
{
}


int CommandProcessor::execute(Session& session, const std::string& commandLine, std::ostream& ostr)
{
	std::vector<std::string> items;
	parseCommandLine(commandLine, items);
	if (!items.empty())
	{
		const std::string& command = items[0];
		Poco::SharedPtr<Command> pCommand = createCommand(session, command);
		if (pCommand)
			return pCommand->execute(session, items, ostr);
		else
			return Command::STATUS_DENIED;
	}
	else return Command::STATUS_OK;
}

	
void CommandProcessor::addCommand(const std::string& command, const std::set<std::string>& aliases, FactoryPtr pFactory, const std::string& permission)
{
	FastMutex::ScopedLock lock(_mutex);
	
	CommandMap::iterator it = _commandMap.find(command);
	if (it == _commandMap.end())
	{
		CommandInfo& info = _commandMap[command];
		info.name        = command;
		info.aliases     = aliases;
		info.pFactory    = pFactory;
		info.permission  = permission;
	}
	else throw Poco::ExistsException(command);
}

	
void CommandProcessor::removeCommand(const std::string& command)
{
	FastMutex::ScopedLock lock(_mutex);

	CommandMap::iterator it = _commandMap.find(command);
	if (it != _commandMap.end())
		_commandMap.erase(it);
	else
		throw Poco::NotFoundException(command);
}


void CommandProcessor::listCommands(std::vector<std::string>& commands) const
{
	FastMutex::ScopedLock lock(_mutex);

	for (CommandMap::const_iterator it = _commandMap.begin(); it != _commandMap.end(); ++it)
	{
		commands.push_back(it->first);
	}
}

	
void CommandProcessor::aliases(const std::string& command, std::set<std::string>& aliases) const
{
	FastMutex::ScopedLock lock(_mutex);
	
	CommandMap::const_iterator it = _commandMap.find(command);
	if (it != _commandMap.end())
	{
		aliases = it->second.aliases;
	}
}


Command* CommandProcessor::createCommand(const Session& session, const std::string& command)
{
	FastMutex::ScopedLock lock(_mutex);

	CommandMap::iterator it = _commandMap.find(command);
	if (it == _commandMap.end())
	{
		// look for aliases
		for (it = _commandMap.begin(); it != _commandMap.end(); ++it)
		{
			if (it->second.aliases.find(command) != it->second.aliases.end())
				break;
		}
	}
	
	if (it != _commandMap.end())
	{
		if (it->second.permission.empty() || session.authorize(it->second.permission))
			return it->second.pFactory->createCommand();
		else
			return 0;
	}
	else throw Poco::NotFoundException(command);
}

	
void CommandProcessor::parseCommandLine(const std::string& commandLine, std::vector<std::string>& items)
{
	std::string::const_iterator it  = commandLine.begin();
	std::string::const_iterator end = commandLine.end();
	
	std::string item;
	while (it != end)
	{
		switch (*it)
		{
		case '"':
			++it;
			while (it != end && *it != '"') item += *it++;
			if (it != end) ++it;
			break;
		case '\'':
			++it;
			while (it != end && *it != '\'') item += *it++;
			if (it != end) ++it;
			break;
		case '\\':
			++it;
			if (it != end) item += *it++;
			break;
		case ' ':
		case '\t':
			if (!item.empty())
			{
				items.push_back(item);
				item.clear();
			}
			++it;
			break;
		default:
			item += *it++;
			break;
		}
	}
	if (!item.empty()) 
		items.push_back(item);
}


} } // namespace Poco::Shell

//
// Connection.cpp
//
// $Id: //poco/1.4/Shell/src/Connection.cpp#1 $
//
// Library: Shell
// Package: Shell
// Module:  Connection
//
// Copyright (c) 2009-2013, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Shell/Connection.h"
#include "Poco/Shell/CommandProcessor.h"
#include "Poco/Shell/Command.h"
#include "Poco/Shell/Session.h"
#include "Poco/Shell/ResponseStream.h"
#include "Poco/Net/DialogSocket.h"
#include "Poco/Net/SocketStream.h"
#include "Poco/Delegate.h"


using Poco::Delegate;


namespace Poco {
namespace Shell {


Connection::Connection(const Poco::Net::StreamSocket& s, CommandProcessor& commandProcessor, const std::string& authServiceName):
	Poco::Net::TCPServerConnection(s),
	_commandProcessor(commandProcessor),
	_authServiceName(authServiceName)
{
}


Connection::~Connection()
{
	this->socket().shutdown();
}


void Connection::run()
{
	//TODO
	//logger().information("New connection from " + this->socket().peerAddress().toString());
	
	try
	{
		Session session(_authServiceName);
		Poco::Net::DialogSocket dialogSocket(this->socket());
		Poco::Net::SocketOutputStream ostr(this->socket());
		ResponseStream responseStream(ostr);
		
		responseStream.setStatus(STATUS_OK);
		std::string greeting(/* TODO properties().getString("greeting", "")*/"");
		if (!greeting.empty())
			responseStream << greeting << std::endl;
		
		std::string commandLine;
		while (dialogSocket.receiveMessage(commandLine))
		{
			try
			{
				responseStream.setStatus(STATUS_INTERMEDIATE);
				int exitCode = _commandProcessor.execute(session, commandLine, responseStream);
				std::string response;
				int status = statusFor(exitCode, response);
				responseStream.setStatus(status);
				responseStream << response << std::endl;
				if (exitCode < 0) break;
			}
			catch (Poco::Exception& exc)
			{
				responseStream.setStatus(STATUS_SERVER_ERROR);
				responseStream << exc.displayText() << std::endl;
			}
		}
	}
	catch (Poco::Exception& exc)
	{
		std::string msg("Error handling connection from ");
		msg += this->socket().peerAddress().toString();
		msg += ": ";
		msg += exc.displayText();
	}
}


int Connection::statusFor(int exitCode, std::string& response)
{
	switch (exitCode)
	{
	case Command::STATUS_OK:
		response = "OK";
		return STATUS_OK;
	case Command::STATUS_USAGE:
		response = "USAGE";
		return STATUS_CLIENT_USAGE;
	case Command::STATUS_ERROR:
		response = "ERROR";
		return STATUS_CLIENT_ERROR;
	case Command::STATUS_DENIED:
		response = "DENIED";
		return STATUS_CLIENT_DENIED;
	default:
		if (exitCode < 0)
		{
			response = "GOODBYE";
			return STATUS_GOODBYE;
		}
		else
		{
			response = "ERROR";
			return STATUS_CLIENT_ERROR + exitCode;
		}
	}
}


} } // namespace Poco::Shell

//
// AbstractCommand.cpp
//
// $Id: //poco/1.4/Shell/src/AbstractCommand.cpp#1 $
//
// Library: Shell
// Package: Shell
// Module:  AbstractCommand
//
// Copyright (c) 2009-2013, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Shell/AbstractCommand.h"
#include "Poco/Util/OptionProcessor.h"
#include "Poco/Util/Option.h"
#include "Poco/Util/Validator.h"
#include "Poco/Util/OptionException.h"
#include "Poco/Util/AbstractConfiguration.h"
#include "Poco/Util/HelpFormatter.h"


namespace Poco {
namespace Shell {


AbstractCommand::AbstractCommand():
	_stopOptionsProcessing(false),
	_showHelp(false)
{
}


AbstractCommand::AbstractCommand(const std::string& description, const std::string& usage):
	_description(description),
	_usage(usage),
	_stopOptionsProcessing(false),
	_showHelp(false)
{
}


AbstractCommand::~AbstractCommand()
{
}


int AbstractCommand::execute(Session& session, const std::vector<std::string>& args, std::ostream& ostr)
{
	std::vector<std::string> processedArgs(args);
	try
	{
		processOptions(processedArgs);
		if (_showHelp)
		{
			displayHelp(ostr);
			return Command::STATUS_OK;
		}
		else
		{
			return executeImpl(session, processedArgs, ostr);
		}
	}
	catch (Poco::Util::OptionException& exc)
	{
		ostr << exc.displayText() << std::endl;
		return Command::STATUS_USAGE;		
	}
	catch (Poco::Exception& exc)
	{
		ostr << exc.displayText() << std::endl;
		return Command::STATUS_ERROR;
	}
}


void AbstractCommand::defineOptions(Poco::Util::OptionSet& options)
{
	options.addOption(
		Poco::Util::Option("help", "h", "display help information on command line arguments")
			.required(false)
			.repeatable(false)
			.callback(Poco::Util::OptionCallback<AbstractCommand>(this, &AbstractCommand::handleHelp)));
}


void AbstractCommand::processOptions(std::vector<std::string>& args)
{
	defineOptions(_options);
	Poco::Util::OptionProcessor processor(_options);
	processor.setUnixStyle(true);
	_commandName = args[0];
	args.erase(args.begin());
	std::vector<std::string>::iterator it = args.begin();
	while (it != args.end() && !_stopOptionsProcessing)
	{
		std::string name;
		std::string value;
		if (processor.process(*it, name, value))
		{
			if (!name.empty()) // "--" option to end options processing
			{
				handleOption(name, value);
			}
			it = args.erase(it);
		}
		else ++it;
	}
	if (!_stopOptionsProcessing)
		processor.checkRequired();
}


void AbstractCommand::stopOptionsProcessing()
{
	_stopOptionsProcessing = true;
}


void AbstractCommand::handleOption(const std::string& name, const std::string& value)
{
	const Poco::Util::Option& option = _options.getOption(name);
	if (option.validator())
	{
		option.validator()->validate(option, value);
	}
	if (!option.binding().empty())
	{
		Poco::Util::AbstractConfiguration* pConfig = option.config();
		poco_check_ptr (pConfig);
		pConfig->setString(option.binding(), value);
	}
	if (option.callback())
	{
		option.callback()->invoke(name, value);
	}
}


void AbstractCommand::handleHelp(const std::string& name, const std::string& value)
{
	_showHelp = true;
	stopOptionsProcessing();
}


void AbstractCommand::displayHelp(std::ostream& ostr)
{
	Poco::Util::HelpFormatter helpFormatter(_options);
	helpFormatter.setCommand(_commandName);
	helpFormatter.setUsage(_usage);
	helpFormatter.setHeader(_description);
	helpFormatter.setUnixStyle(true);
	helpFormatter.setAutoIndent();
	helpFormatter.format(ostr);
}


} } // namespace Poco::Shell

//
// Session.h
//
// $Id: //poco/1.4/Shell/include/Poco/Shell/Session.h#1 $
//
// Library: Shell
// Package: Shell
// Module:  Session
//
// Definition of the Session class.
//
// Copyright (c) 2009-2013, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Shell_Session_INCLUDED
#define Shell_Session_INCLUDED


#include "Poco/Shell/Shell.h"


namespace Poco {
namespace Shell {


class Shell_API Session
	/// The Session class provides user authentication and
	/// authorization for the CommandProcessor.
	///
	/// It is also passed as the first argument to
	/// the execute() member function of Command, so
	/// that command implementations can perform
	/// custom authorization.
{
public:
	Session(const std::string& authServiceName);
		/// Creates the Session, using the given bundle context and
		/// the given service name of the authentication service.
		///
		/// An empty service name disables authentication and authorization.

	~Session();
		/// Destroys the Session.

	bool login(const std::string& userName, const std::string& credentials);
		/// Attempts to authenticate the user by checking the
		/// given userName and credentials with the authentication service.
		///
		/// Returns true if the user was successfully authenticated, false otherwise.
	
	bool authorize(const std::string& permission) const;
		/// Returns true if the user is authenticated and has the
		/// given permission, false otherwise.
	
	bool authenticated() const;
		/// Returns true if the user is authenticated.
	
	const std::string& user() const;
		/// Returns the name of the current user, or an empty string
		/// if no user is logged in.

protected:
	//TODO
	//Poco::AuthService::Ptr authService() const;

private:
	Session();
	Session(const Session&);
	Session& operator = (const Session&);
	
	std::string _authServiceName;
	//TODO
	//mutable Poco::Auth::AuthService::Ptr _pAuthService;
	std::string _userName;
	bool _authenticated;
};


//
// inlines
//
inline bool Session::authenticated() const
{
	return _authenticated;
}


inline const std::string& Session::user() const
{
	return _userName;
}


} } // namespace Poco::Shell


#endif // Shell_Session_INCLUDED

//
// CommandProcessor.h
//
// $Id: //poco/1.4/Shell/include/Poco/Shell/CommandProcessor.h#1 $
//
// Library: Shell
// Package: Shell
// Module:  CommandProcessor
//
// Definition of the CommandProcessor class.
//
// Copyright (c) 2009-2013, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Shell_CommandProcessor_INCLUDED
#define Shell_CommandProcessor_INCLUDED


#include "Poco/Shell/Shell.h"
#include "Poco/Shell/CommandFactory.h"
#include "Poco/SharedPtr.h"
#include "Poco/Mutex.h"
#include <map>
#include <set>
#include <vector>


namespace Poco {
namespace Shell {


class Session;


class Shell_API CommandProcessor
	/// The CommandProcessor parses command lines and invokes
	/// commands.
{
public:
	typedef Poco::SharedPtr<CommandFactory> FactoryPtr;

	CommandProcessor();
		/// Creates the CommandProcessor.

	~CommandProcessor();
		/// Destroys the CommandProcessor.

	int execute(Session& session, const std::string& commandLine, std::ostream& ostr);
		/// Executes the command given in commandLine in the given session.
		///
		/// Throws a Poco::NotFoundException if the given command
		/// is not known.
		///
		/// The following commands are builtin:
		///   - .login <userName> <credentials>: 
		///     Attempts to log the user into the current session with the given userName and credentials (password).
		///   - .help
		///     Displays a list of all registered commands.
		///   - .quit
		///     Ends the session.
		
	void addCommand(const std::string& command, const std::set<std::string>& aliases, FactoryPtr pFactory, const std::string& permission);
		/// Adds a command to the command processor.
		///
		/// The given command name must be unique, otherwise an ExistsException will be thrown.
		/// The given aliases set can be empty.
		/// Upon execution of the command, the given permission is checked against
		/// the current user's permissions. It can be empty to disable the check.

	void removeCommand(const std::string& command);
		/// Removes the given command.

	void listCommands(std::vector<std::string>& commands) const;
		/// Fills the given vector with the names of all registered commands.
		
	void aliases(const std::string& command, std::set<std::string>& aliases) const;
		/// Fills the given set with all aliases for the given command.

	static const std::string COMMAND_LOGIN;
	static const std::string COMMAND_HELP;
	static const std::string COMMAND_QUIT;

protected:
	Command* createCommand(const Session& session, const std::string& command);
		/// Creates a Command object for the given command name.
		///
		/// Throws a Poco::NotFoundException if the given command is unknown.
		/// Returns a new command object, or a null pointer if the user
		/// is not authorized to call the command.
		
	void parseCommandLine(const std::string& commandLine, std::vector<std::string>& items);
		/// Parses the command line into single items.
		///
		/// The first item is used as command name. Remaining items are arguments
		/// to the command. Items are separated by one or more space or tab characters.
		/// An item can be enclosed in single or double quotes.
		/// Characters can be escaped with a backslash.
		
private:
	struct CommandInfo
	{
		std::string name;
		std::set<std::string> aliases;
		std::string permission;
		FactoryPtr pFactory;
	};
	typedef std::map<std::string, CommandInfo> CommandMap;
	
	CommandMap  _commandMap;
	mutable Poco::FastMutex _mutex;
};


} } // namespace Poco::Shell


#endif // Shell_CommandProcessor_INCLUDED

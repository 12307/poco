//
// BoolFormatter.cpp
//
// $Id: //poco/Main/WebWidgets/src/BoolFormatter.cpp#1 $
//
// Library: WebWidgets
// Package: ChangeThis
// Module:  BoolFormatter
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/BoolFormatter.h"
#include "Poco/Exception.h"
#include "Poco/String.h"


namespace Poco {
namespace WebWidgets {


BoolFormatter::BoolFormatter()
{
}


BoolFormatter::~BoolFormatter()
{
}


std::string BoolFormatter::format(const Poco::Any& value) const
{
	bool val = AnyCast<bool>(value);
	static const std::string VAL_TRUE("true");
	static const std::string VAL_FALSE("false");
	if (val)
		return VAL_TRUE;
	return VAL_FALSE;
}


Poco::Any BoolFormatter::parse(const std::string& value) const
{
	std::string val(trim(value));
	static const std::string VAL_TRUE("true");
	static const std::string VAL_FALSE("false");

	if (icompare(val, VAL_TRUE) == 0)
		return true;
	if (icompare(val, VAL_FALSE) == 0)
		return false;
	throw RangeException("Illegal string value: connot convert to bool");
}


} } // namespace Poco::WebWidgets

//
// TimeField.cpp
//
// $Id: //poco/Main/WebWidgets/src/TimeField.cpp#3 $
//
// Library: WebWidgets
// Package: Controls
// Module:  TimeField
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/TimeField.h"
#include "Poco/WebWidgets/TimeFieldCell.h"


namespace Poco {
namespace WebWidgets {


TimeField::TimeField(const std::string& name, const std::type_info& type):
	TextField(name, type, new TimeFieldCell(this)),
	_pMyCell(0)
{
	_pMyCell = cell<TimeFieldCell>();
}


TimeField::TimeField(const char* pName, const std::type_info& type):
	TextField(std::string(pName), type, new TimeFieldCell(this)),
	_pMyCell(0)
{
	_pMyCell = cell<TimeFieldCell>();
}


TimeField::TimeField(const std::type_info& type):
	TextField(type, new TimeFieldCell(this)),
	_pMyCell(0)
{
	_pMyCell = cell<TimeFieldCell>();
}


TimeField::TimeField(const std::string& name):
	TextField(name, typeid(TimeField), new TimeFieldCell(this)),
	_pMyCell(0)
{
	_pMyCell = cell<TimeFieldCell>();
}


TimeField::TimeField(const char* pName):
	TextField(std::string(pName), typeid(TimeField), new TimeFieldCell(this)),
	_pMyCell(0)
{
	_pMyCell = cell<TimeFieldCell>();
}


TimeField::TimeField():
	TextField(typeid(TimeField), new TimeFieldCell(this)),
	_pMyCell(0)
{
	_pMyCell = cell<TimeFieldCell>();
}


TimeField::~TimeField()
{
}


TimeField::Format TimeField::getFormat() const
{
	return _pMyCell->getFormat();
}


void TimeField::setFormat(TimeField::Format fmt)
{
	_pMyCell->setFormat(fmt);
}


void TimeField::setTime(const Poco::DateTime& dt)
{
	_pMyCell->setTime(dt);
}


const Poco::DateTime& TimeField::getTime() const
{
	return _pMyCell->getTime();
}


} } // namespace Poco::WebWidgets

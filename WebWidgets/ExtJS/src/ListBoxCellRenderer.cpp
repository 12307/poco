//
// ListBoxCellRenderer.cpp
//
// $Id: //poco/Main/WebWidgets/ExtJS/src/ListBoxCellRenderer.cpp#1 $
//
// Library: ExtJS
// Package: Core
// Module:  ListBoxCellRenderer
//
// Copyright (c) 2007, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/WebWidgets/ExtJS/ListBoxCellRenderer.h"
#include "Poco/WebWidgets/ExtJS/FormRenderer.h"
#include "Poco/WebWidgets/ExtJS/Utility.h"
#include "Poco/WebWidgets/ListBoxCell.h"
#include <sstream>


namespace Poco {
namespace WebWidgets {
namespace ExtJS {


ListBoxCellRenderer::ListBoxCellRenderer()
{
}


ListBoxCellRenderer::~ListBoxCellRenderer()
{
}


void ListBoxCellRenderer::renderHead(const Renderable* pRenderable, const RenderContext& context, std::ostream& ostr)
{
	poco_assert_dbg (pRenderable != 0);
	poco_assert_dbg (pRenderable->type() == typeid(Poco::WebWidgets::ListBoxCell));
	const ListBoxCell* pListBoxCell = static_cast<const Poco::WebWidgets::ListBoxCell*>(pRenderable);

	ostr << "new Ext.ux.Multiselect({";

	ListBoxCellRenderer::renderProperties(pListBoxCell, ostr);

	ostr << "})";
}


void ListBoxCellRenderer::renderBody(const Renderable* pRenderable, const RenderContext& context, std::ostream& ostr)
{
}


void ListBoxCellRenderer::renderProperties(const ListBoxCell* pListBoxCell, std::ostream& ostr)
{
	Utility::writeRenderableProperties(pListBoxCell, ostr);

	if (pListBoxCell->getHeight() > 0)
		ostr << ",height:" << pListBoxCell->getHeight();
	if (pListBoxCell->getWidth() > 0)
		ostr << ",width:" << pListBoxCell->getWidth();

	ostr << ",dataFields:['i','d'],data:[";

	//now serialize data, use cached content for that
	ListBoxCell::StringData::const_iterator it = pListBoxCell->beginString();
	ListBoxCell::StringData::const_iterator itEnd = pListBoxCell->endString();
	ListBoxCell::Data::const_iterator itV = pListBoxCell->begin();
	ListBoxCell::Data::const_iterator itVEnd = pListBoxCell->end();
	int cnt = 0;
	bool selected=false;
	std::ostringstream initValue;
	initValue << "'";
	for (; it != itEnd; ++it, ++cnt, ++itV)
	{
		if (it != pListBoxCell->beginString())
			ostr << ",";
		if (itV->second)
		{
			if (selected)
				initValue << ",";
			initValue << cnt;
			selected = true;
		}

		ostr << "['" << cnt << "','" << *it << "']";
	}
	initValue << "'";
	ostr << "]";
	ostr << ",valueField:'i',displayField:'d',initVal:" << initValue.str();
}


} } } // namespace Poco::WebWidgets::ExtJS

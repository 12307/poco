//
// Row.h
//
// $Id: //poco/Main/Data/include/Poco/Data/Row.h#7 $
//
// Library: Data
// Package: DataCore
// Module:  Row
//
// Definition of the Row class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Data_Row_INCLUDED
#define Data_Row_INCLUDED


#include "Poco/Data/Data.h"
#include "Poco/DynamicAny.h"
#include <vector>
#include <string>
#include <iostream>


namespace Poco {
namespace Data {


class RecordSet;


class Data_API Row
	/// Row class.
{
public:
	enum Comparison
	{
		COMPARE_AS_INTEGER,
		COMPARE_AS_FLOAT,
		COMPARE_AS_STRING
	};

	static const std::string EOL;

	Row();
		/// Creates the Row.

	~Row();
		/// Destroys the Row.

	DynamicAny& operator [] (std::size_t col);
		/// Returns the reference to data value at column location.

	DynamicAny& operator [] (const std::string& name);
		/// Returns the reference to data value at named column location.

	template <typename T>
	void append(const std::string& name, const T& val)
		/// Appends the value to the row.
	{
		DynamicAny da = val;
		_values.push_back(da);
		_names.push_back(name);
	}
		
	std::size_t fieldCount() const;
		/// Returns the number of fields in this row.

	void reset();
		/// Resets the row.

	void separator(const std::string& sep);
		/// Sets the separator.

	void sortField(std::size_t pos);
		/// Sets the field used for sorting.

	void sortField(const std::string& name);
		/// Sets the field used for sorting.

	const std::string& toStringN() const;
		/// Converts the row names to string, inserting separator
		/// string between fields and end-of-line at the end.

	const std::string& toStringV() const;
		/// Converts the row values to string, inserting separator
		/// string between fields and end-of-line at the end.

	bool operator == (const Row& other) const;
		/// Equality operator.

	bool operator != (const Row& other) const;
		/// Inequality operator.

	bool operator < (const Row& other) const;
		/// Less-then operator.

	void comparison(Comparison comp);
		/// Sets the type of comparison.

private:
	std::size_t getPosition(const std::string& name);
	bool isEqualSize(const Row& other) const;
	bool isEqualType(const Row& other) const;

	std::vector<std::string> _names;
	std::vector<DynamicAny>  _values;
	mutable std::string      _strValues;
	mutable std::string      _strNames;
	std::string              _separator;
	std::size_t              _sortField;
	Comparison               _comparison;
};


Data_API std::ostream& operator << (std::ostream &os, const Row& row);


///
/// inlines
///
inline std::size_t Row::fieldCount() const
{
	return _values.size();
}


inline void Row::reset()
{
	_names.clear();
	_values.clear();
}


inline void Row::separator(const std::string& sep)
{
	_separator = sep;
}


} } // namespace Poco::Data


#endif // Data_Row_INCLUDED

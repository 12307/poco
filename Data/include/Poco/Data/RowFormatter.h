//
// RowFormatter.h
//
// $Id: //poco/Main/Data/include/Poco/Data/RowFormatter.h#1 $
//
// Library: Data
// Package: DataCore
// Module:  RowFormatter
//
// Definition of the RowFormatter class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Data_RowFormatter_INCLUDED
#define Data_RowFormatter_INCLUDED


#include "Poco/Data/Data.h"
#include "Poco/SharedPtr.h"
#include "Poco/DynamicAny.h"
#include <sstream>
#include <vector>


namespace Poco {
namespace Data {


class Data_API RowFormatter
	/// Row formatter is a rudimentary formatting class providing
	/// basic row formatting. For custom formatting
	/// strategies, inherit from this class and override formatNames()
	/// and formatValues() member functions.
{
public:
	typedef std::vector<std::string>             NameVec;
	typedef SharedPtr<std::vector<std::string> > NameVecPtr;
	typedef std::vector<DynamicAny>              ValueVec;

	static const int DEFAULT_COLUMN_WIDTH = 16;

	RowFormatter(std::streamsize width);
		/// Creates the RowFormatter and sets the column width to specified value.

	RowFormatter(const std::string& prefix = "", const std::string& postfix = "");
		/// Creates the RowFormatter and sets the prefix and postfix to specified values.

	virtual ~RowFormatter();
		/// Destroys the RowFormatter.

	const std::string& prefix() const;
		/// Returns prefix string;

	virtual std::string& formatNames(const NameVecPtr pNames, std::string& formattedNames) const;
		/// Formats the row field names.

	virtual std::string& formatValues(const ValueVec& vals, std::string& formattedValues) const;
		/// Formats the row values.

	const std::string& postfix() const;
		/// Returns postfix string;

	void setWidth(std::streamsize width);
		/// Sets the column width.

	std::streamsize getWidth() const;
		/// Returns the column width.

protected:
	void setPrefix(const std::string& prefix);
	void setPostfix(const std::string& postfix);

private:
	std::streamsize _width;
	std::string     _prefix;
	std::string     _postfix;
};


///
/// inlines
///

inline void RowFormatter::setWidth(std::streamsize width)
{
	_width = width;
}


inline std::streamsize RowFormatter::getWidth() const
{
	return _width;
}


inline void RowFormatter::setPrefix(const std::string& prefix)
{
	_prefix = prefix;
}


inline void RowFormatter::setPostfix(const std::string& postfix)
{
	_postfix = postfix;
}


inline const std::string& RowFormatter::prefix() const
{
	return _prefix;
}


inline const std::string& RowFormatter::postfix() const
{
	return _postfix;
}


} } // namespace Poco::Data


#endif // Data_RowFormatter_INCLUDED

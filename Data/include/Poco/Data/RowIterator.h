//
// RowIterator.h
//
// $Id: //poco/Main/Data/include/Poco/Data/RowIterator.h#1 $
//
// Library: Data
// Package: DataCore
// Module:  RowIterator
//
// Definition of the RowIterator class.
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Data_RowIterator_INCLUDED
#define Data_RowIterator_INCLUDED


#include "Poco/Data/Data.h"
#include "Poco/Data/Row.h"
#include "Poco/DynamicAny.h"
#include <iterator>


namespace Poco {
namespace Data {


class RecordSet;


class Data_API RowIterator
	/// RowIterator class.
{
public:
	typedef std::bidirectional_iterator_tag iterator_category;
	typedef Row value_type;
	typedef std::ptrdiff_t difference_type;
	typedef Row* pointer;
	typedef Row& reference;

	RowIterator(RecordSet& recordSet, bool positionEnd = false);
		/// Creates the RowIterator and positions it at the beginning.

	~RowIterator();
		/// Destroys the RowIterator.

	bool operator == (const RowIterator& other);
		/// Equality operator.

	bool operator != (const RowIterator& other);
		/// Inequality operator.

	Row& operator * () const;
		/// Returns reference to the current row.

	Row* operator -> () const;
		/// Returns pointer to the current row.

	std::size_t operator ++ ();
		/// Advances by one position and returns current position.

	std::size_t operator ++ (int);
		/// Advances by one position and returns previous current position.

	std::size_t operator -- ();
		/// Goes back by one position and returns current position.

	std::size_t operator -- (int);
		/// Goes back by one position and returns previouscurrent position.

private:
	RowIterator();

	void increment();
	void decrement();

	static const int POSITION_END;

	RecordSet& _recordSet;
	std::size_t _position;
};


///
/// inlines
///
inline bool RowIterator::operator == (const RowIterator& other)
{
	return _position == other._position;
}


inline bool RowIterator::operator != (const RowIterator& other)
{
	return _position != other._position;
}


} } // namespace Poco::Data


#endif // Data_RowIterator_INCLUDED

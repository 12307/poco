//
// Utility.cpp
//
// $Id: //poco/Main/Data/ODBC/src/Utility.cpp#3 $
//
// Library: ODBC
// Package: ODBC
// Module:  Utility
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Data/ODBC/Utility.h"
#include "Poco/Data/ODBC/Handle.h"
#include "Poco/Data/ODBC/ODBCException.h"
#include "Poco/NumberFormatter.h"
#include "Poco/DateTime.h"
#include <cmath>


namespace Poco {
namespace Data {
namespace ODBC {


const TypeInfo Utility::_dataTypes;


Utility::DriverMap& Utility::drivers(Utility::DriverMap& driverMap)
{
	static const EnvironmentHandle henv;
	const int length = sizeof(SQLCHAR) * 512;

	SQLCHAR desc[length];
	memset(desc, 0, length);
	SQLSMALLINT len1 = length;
	SQLCHAR attr[length];
	memset(attr, 0, length);
	SQLSMALLINT len2 = length;
	RETCODE rc = 0;

	while (!Utility::isError(rc = SQLDrivers(henv, 
		SQL_FETCH_NEXT,
		desc,
		length,
		&len1,
		attr,
		len2,
		&len2)))
	{
		driverMap.insert(DSNMap::value_type(std::string((char *) desc), 
			std::string((char *) attr)));
		memset(desc, 0, length);
		memset(attr, 0, length);
		len2 = length;
	}

	if (SQL_NO_DATA != rc) 
		throw EnvironmentError(henv);

	return driverMap;
}


Utility::DSNMap& Utility::dataSources(Utility::DSNMap& dsnMap)
{
	static const EnvironmentHandle henv;
	const int length = sizeof(SQLCHAR) * 512;
	const int dsnLength = sizeof(SQLCHAR) * (SQL_MAX_DSN_LENGTH + 1);

	SQLCHAR dsn[dsnLength];
	memset(dsn, 0, dsnLength);
	SQLSMALLINT len1 = sizeof(SQLCHAR) * SQL_MAX_DSN_LENGTH;
	SQLCHAR desc[length];
	memset(desc, 0, length);
	SQLSMALLINT len2 = length;
	RETCODE rc = 0;

	while (!Utility::isError(rc = SQLDataSources(henv, 
		SQL_FETCH_NEXT,
		dsn,
		SQL_MAX_DSN_LENGTH,
		&len1,
		desc,
		len2,
		&len2)))
	{
		dsnMap.insert(DSNMap::value_type(std::string((char *) dsn), std::string((char *) desc)));
		memset(dsn, 0, dsnLength);
		memset(desc, 0, length);
		len2 = length;
	}

	if (SQL_NO_DATA != rc) 
		throw EnvironmentError(henv);

	return dsnMap;
}


void Utility::dateTimeSync(Poco::DateTime& dt, const SQL_TIMESTAMP_STRUCT& ts)
{
	double msec = ts.fraction/1000000;
	double usec = 1000 * (msec - floor(msec));

	dt.assign(ts.year,
		ts.month,
		ts.day,
		ts.hour,
		ts.minute,
		ts.second,
		(int) floor(msec),
		(int) floor(usec));
}


void Utility::dateTimeSync(std::vector<Poco::DateTime>& dt, const std::vector<SQL_TIMESTAMP_STRUCT>& ts)
{
	std::size_t size = ts.size();
	if (dt.size() != size) dt.resize(size);
	std::vector<Poco::DateTime>::iterator dIt = dt.begin();
	std::vector<SQL_TIMESTAMP_STRUCT>::const_iterator it = ts.begin();
	std::vector<SQL_TIMESTAMP_STRUCT>::const_iterator end = ts.end();
	for (; it != end; ++it, ++dIt) dateTimeSync(*dIt, *it);
}


void Utility::dateSync(SQL_DATE_STRUCT& ds, const Date& d)
{
	ds.year = d.year();
	ds.month = d.month();
	ds.day = d.day();
}


void Utility::dateSync(std::vector<SQL_DATE_STRUCT>& ds, const std::vector<Date>& d)
{
	std::size_t size = d.size();
	if (ds.size() != size) ds.resize(size);
	std::vector<SQL_DATE_STRUCT>::iterator dIt = ds.begin();
	std::vector<Date>::const_iterator it = d.begin();
	std::vector<Date>::const_iterator end = d.end();
	for (; it != end; ++it, ++dIt) dateSync(*dIt, *it);
}


void Utility::timeSync(SQL_TIME_STRUCT& ts, const Time& t)
{
	ts.hour = t.hour();
	ts.minute = t.minute();
	ts.second = t.second();
}


void Utility::timeSync(std::vector<SQL_TIME_STRUCT>& ts, const std::vector<Time>& t)
{
	std::size_t size = t.size();
	if (ts.size() != size) ts.resize(size);
	std::vector<SQL_TIME_STRUCT>::iterator tIt = ts.begin();
	std::vector<Time>::const_iterator it = t.begin();
	std::vector<Time>::const_iterator end = t.end();
	for (; it != end; ++it, ++tIt) timeSync(*tIt, *it);
}


void Utility::dateTimeSync(SQL_TIMESTAMP_STRUCT& ts, const Poco::DateTime& dt)
{
	ts.year = dt.year();
	ts.month = dt.month();
	ts.day = dt.day();
	ts.hour = dt.hour();
	ts.minute = dt.minute();
	ts.second = dt.second();
	// Fraction support is limited to milliseconds due to MS SQL Server limitation
	// see http://support.microsoft.com/kb/263872
	ts.fraction = (dt.millisecond() * 1000000);// + (dt.microsecond() * 1000);
}


void Utility::dateTimeSync(std::vector<SQL_TIMESTAMP_STRUCT>& ts, const std::vector<Poco::DateTime>& dt)
{
	std::size_t size = dt.size();
	if (ts.size() != size) ts.resize(size);
	std::vector<SQL_TIMESTAMP_STRUCT>::iterator tIt = ts.begin();
	std::vector<Poco::DateTime>::const_iterator it = dt.begin();
	std::vector<Poco::DateTime>::const_iterator end = dt.end();
	for (; it != end; ++it, ++tIt) dateTimeSync(*tIt, *it);
}


void Utility::dateSync(std::vector<Date>& d, const std::vector<SQL_DATE_STRUCT>& ds)
{
	std::size_t size = ds.size();
	if (d.size() != size) d.resize(size);
	std::vector<Date>::iterator dIt = d.begin();
	std::vector<SQL_DATE_STRUCT>::const_iterator it = ds.begin();
	std::vector<SQL_DATE_STRUCT>::const_iterator end = ds.end();
	for (; it != end; ++it, ++dIt) dateSync(*dIt, *it);
}


void Utility::timeSync(std::vector<Time>& t, const std::vector<SQL_TIME_STRUCT>& ts)
{
	std::size_t size = ts.size();
	if (t.size() != size) t.resize(size);
	std::vector<Time>::iterator dIt = t.begin();
	std::vector<SQL_TIME_STRUCT>::const_iterator it = ts.begin();
	std::vector<SQL_TIME_STRUCT>::const_iterator end = ts.end();
	for (; it != end; ++it, ++dIt) timeSync(*dIt, *it);
}


} } } // namespace Poco::Data::ODBC

//
// Row.cpp
//
// $Id: //poco/Main/Data/src/Row.cpp#2 $
//
// Library: Data
// Package: DataCore
// Module:  Row
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Data/Row.h"
#include "Poco/Exception.h"


namespace Poco {
namespace Data {


#if defined(POCO_OS_FAMILY_WINDOWS)
const std::string Row::EOL = "\r\n";
#else
const std::string Row::EOL = "\n";
#endif



std::ostream& operator << (std::ostream &os, const Row& row)
{
      os << row.toStringV();
      return os;
}


Row::Row(): 
	_separator("\t"), 
	_sortField(0),
	_comparison(COMPARE_AS_STRING)
{
}


Row::~Row()
{
}


DynamicAny& Row::operator [] (std::size_t col)
{
	try
	{
		return _values.at(col);
	}catch (std::range_error& re)
	{
		throw RangeException(re.what());
	}
}


DynamicAny& Row::operator [] (const std::string& name)
{
	std::size_t col = getPosition(name);
	return (*this)[col];
}


std::size_t Row::getPosition(const std::string& name)
{
	std::vector<std::string>::const_iterator it = _names.begin();
	std::vector<std::string>::const_iterator end = _names.end();
	std::size_t col = 0;
	for (; it != end; ++it, ++col)
		if (name == *it) break;
	
	return col;
}


void Row::sortField(std::size_t pos)
{
	poco_assert (pos <= _values.size());
	_sortField = pos;

	if ((_values[pos].type() == typeid(Poco::Int8))   ||
		(_values[pos].type() == typeid(Poco::UInt8))  ||
		(_values[pos].type() == typeid(Poco::Int16))  ||
		(_values[pos].type() == typeid(Poco::UInt16)) ||
		(_values[pos].type() == typeid(Poco::Int32))  ||
		(_values[pos].type() == typeid(Poco::UInt32)) ||
		(_values[pos].type() == typeid(Poco::Int64))  ||
		(_values[pos].type() == typeid(Poco::UInt64)) ||
		(_values[pos].type() == typeid(bool)))
	{
		comparison(COMPARE_AS_INTEGER);
	}
	else if ((_values[pos].type() == typeid(float)) ||
		(_values[pos].type() == typeid(double)))
	{
		comparison(COMPARE_AS_FLOAT);
	}
	else
	{
		comparison(COMPARE_AS_STRING);
	}

}


void Row::sortField(const std::string& name)
{
	sortField(getPosition(name));
}


bool Row::isEqualSize(const Row& other) const
{
	return (other._values.size() == _values.size());
}


bool Row::isEqualType(const Row& other) const
{
	std::vector<DynamicAny>::const_iterator it = _values.begin();
	std::vector<DynamicAny>::const_iterator end = _values.end();
	for (int i = 0; it != end; ++it, ++i)
	{
		if (it->type() != other._values[i].type())
			return false;
	}

	return true;
}


void Row::comparison(Comparison comp)
{
	_comparison = comp;
}


bool Row::operator == (const Row& other) const
{
	if (!isEqualSize(other)) return false;
	if (!isEqualType(other)) return false;

	std::vector<DynamicAny>::const_iterator it = _values.begin();
	std::vector<DynamicAny>::const_iterator end = _values.end();
	for (int i = 0; it != end; ++it, ++i)
	{
		if ((*it).convert<std::string>() != other._values[i].convert<std::string>())
			return false;
	}

	return true;
}


bool Row::operator != (const Row& other) const
{
	return !(*this == other);
}


bool Row::operator < (const Row& other) const
{
	if (_sortField != other._sortField)
		throw InvalidAccessException("Rows compared have different sorting criteria.");

	switch (_comparison)
	{
	case COMPARE_AS_INTEGER:
		return (_values[_sortField].convert<Poco::Int64>() < 
			other._values[other._sortField].convert<Poco::Int64>());

	case COMPARE_AS_FLOAT:
		return (_values[_sortField].convert<double>() < 
			other._values[other._sortField].convert<double>());

	case COMPARE_AS_STRING:
		return (_values[_sortField].convert<std::string>() < 
			other._values[other._sortField].convert<std::string>());
	}

	throw IllegalStateException("Unknown comparison mode.");
}


const std::string& Row::toStringV() const
{
	_strValues.clear();
	std::vector<DynamicAny>::const_iterator it = _values.begin();
	std::vector<DynamicAny>::const_iterator end = _values.end();
	for (; it != end; ++it)
	{
		_strValues.append(it->convert<std::string>());
		_strValues.append(_separator);
	}
	_strValues.replace(_strValues.find_last_of(_separator), _separator.length(), EOL);

	return _strValues;
}


const std::string& Row::toStringN() const
{
	_strNames.clear();
	std::vector<std::string>::const_iterator it = _names.begin();
	std::vector<std::string>::const_iterator end = _names.end();
	for (; it != end; ++it)
	{
		_strNames.append(*it);
		_strNames.append(_separator);
	}
	_strNames.replace(_strNames.find_last_of(_separator), _separator.length(), EOL);

	return _strNames;
}


} } // namespace Poco::Data

//
// RowFormatter.cpp
//
// $Id: //poco/Main/Data/src/RowFormatter.cpp#1 $
//
// Library: Data
// Package: DataCore
// Module:  RowFormatter
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Data/RowFormatter.h"
#include "Poco/Data/Row.h"
#include "Poco/Exception.h"


namespace Poco {
namespace Data {


#if defined(POCO_OS_FAMILY_WINDOWS)
const std::string RowFormatter::EOL = "\r\n";
#elif (POCO_OS == POCO_OS_MAC_OS_X)
const std::string RowFormatter::EOL = "\r";
#else
const std::string RowFormatter::EOL = "\n";
#endif


RowFormatter::RowFormatter(Row* pRow): 
	_pRow(pRow), 
	_separator("\t")
{
}


RowFormatter::~RowFormatter()
{
}


std::string& RowFormatter::formatNames(std::string& names)
{
	if (!_pRow)
		throw NullPointerException("Null row.");

	Row::NameVec::const_iterator it = _pRow->names()->begin();
	Row::NameVec::const_iterator end = _pRow->names()->end();
	for (; it != end; ++it)
	{
		names.append(*it);
		names.append(_separator);
	}
	names.replace(names.find_last_of(_separator), _separator.length(), EOL);

	return names;
}


std::string& RowFormatter::formatValues(std::string& values)
{
	if (!_pRow)
		throw NullPointerException("Null row.");

	Row::ValueVec::const_iterator it = _pRow->values().begin();
	Row::ValueVec::const_iterator end = _pRow->values().end();
	for (; it != end; ++it)
	{
		values.append(it->convert<std::string>());
		values.append(_separator);
	}
	values.replace(values.find_last_of(_separator), _separator.length(), EOL);

	return values;
}


} } // namespace Poco::Data

//
// RowIterator.cpp
//
// $Id: //poco/Main/Data/src/RowIterator.cpp#2 $
//
// Library: Data
// Package: DataCore
// Module:  RowIterator
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Data/RowIterator.h"
#include "Poco/Data/RecordSet.h"
#undef min
#undef max
#include <limits>


namespace Poco {
namespace Data {


const int RowIterator::POSITION_END = std::numeric_limits<std::size_t>::max();


RowIterator::RowIterator(const RecordSet& recordSet, bool isEmpty): 
	_position(isEmpty ? POSITION_END : 0),
	_recordSet(recordSet)
{
}


RowIterator::~RowIterator()
{
}


void RowIterator::increment()
{
	if (POSITION_END == _position)
		throw RangeException("End of iterator reached.");

	if (_position < _recordSet.rowCount() - 1)
		++_position;
	else
		_position = POSITION_END;
}


void RowIterator::decrement()
{
	if (0 == _position)
		throw RangeException("End of iterator reached.");

	--_position;
}


const Row& RowIterator::operator * () const
{
	return _recordSet.row(_position);
}


const Row& RowIterator::operator ++ ()
{
	increment();
	return _recordSet.row(_position);
}


const Row& RowIterator::operator ++ (int)
{
	increment();
	return _recordSet.row(_position - 1);
}


const Row& RowIterator::operator -- ()
{
	decrement();
	return _recordSet.row(_position);
}


const Row& RowIterator::operator -- (int)
{
	decrement();
	return _recordSet.row(_position + 1);
}


} } // namespace Poco::Data

//
// AutoTransaction.cpp
//
// $Id: //poco/Main/Data/src/AutoTransaction.cpp#1 $
//
// Library: Data
// Package: DataCore
// Module:  AutoTransaction
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Data/AutoTransaction.h"


namespace Poco {
namespace Data {


AutoTransaction::AutoTransaction(Poco::Data::Session& session, Poco::Logger* pLogger):
	_session(session),
	_pLogger(pLogger),
	_mustRollback(true)
{
	if (!_session.isTransaction())
	{
		_session.begin();
	}
}

	
AutoTransaction::~AutoTransaction()
{
	if (_mustRollback)
	{
		try
		{
			if (_pLogger) 
				_pLogger->debug("Rolling back transaction.");

			_session.rollback();
		}
		catch (Poco::Exception& exc)
		{
			if (_pLogger) 
				_pLogger->fatal("Error while rolling back database transaction: " + exc.displayText());
		}
	}
}

	
void AutoTransaction::commit()
{
	if (_pLogger) 
		_pLogger->debug("Committing transaction.");

	_session.commit();
	_mustRollback = false;
}

	
void AutoTransaction::rollback()
{
	if (_pLogger) 
		_pLogger->debug("Rolling back transaction.");

	_session.rollback();
	_mustRollback = false;
}


} } // namespace Poco::Data

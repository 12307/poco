//
// AbstractBinder.cpp
//
// $Id: //poco/Main/Data/src/AbstractBinder.cpp#4 $
//
// Library: Data
// Package: DataCore
// Module:  AbstractBinder
//
// Copyright (c) 2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Data/AbstractBinder.h"
#include "Poco/Data/DataException.h"
#include "Poco/Any.h"
#include "Poco/DynamicAny.h"
#include "Poco/Data/BLOB.h"


namespace Poco {
namespace Data {


AbstractBinder::AbstractBinder()
{
}


AbstractBinder::~AbstractBinder()
{
}


void AbstractBinder::bind(std::size_t pos, const Any& val, Direction dir)
{
	if(val.type() == typeid(Int32))
		bind(pos, RefAnyCast<Int32>(val), dir);
	else if(val.type() == typeid(std::string))
		bind(pos, RefAnyCast<std::string>(val), dir);
	else if (val.type() == typeid(bool))
		bind(pos, RefAnyCast<bool>(val), dir);
	else if(val.type() == typeid(char))
		bind(pos, RefAnyCast<char>(val), dir);
	else if(val.type() == typeid(Int8))
		bind(pos, RefAnyCast<Int8>(val), dir);
	else if(val.type() == typeid(UInt8))
		bind(pos, RefAnyCast<UInt8>(val), dir);
	else if(val.type() == typeid(Int16))
		bind(pos, RefAnyCast<Int16>(val), dir);
	else if(val.type() == typeid(UInt16))
		bind(pos, RefAnyCast<UInt16>(val), dir);
	else if(val.type() == typeid(UInt32))
		bind(pos, RefAnyCast<UInt32>(val), dir);
	else if(val.type() == typeid(Int64))
		bind(pos, RefAnyCast<Int64>(val), dir);
	else if(val.type() == typeid(UInt64))
		bind(pos, RefAnyCast<UInt64>(val), dir);
	else if(val.type() == typeid(float))
		bind(pos, RefAnyCast<float>(val), dir);
	else if(val.type() == typeid(double))
		bind(pos, RefAnyCast<double>(val), dir);
	else if(val.type() == typeid(DateTime))
		bind(pos, RefAnyCast<DateTime>(val), dir);
	else if(val.type() == typeid(BLOB))
		bind(pos, RefAnyCast<BLOB>(val), dir);
#ifndef POCO_LONG_IS_64_BIT
	else if(val.type() == typeid(long))
		bind(pos, RefAnyCast<long>(val), dir);
#endif
	else
		throw UnknownTypeException(std::string(val.type().name()));
}


void AbstractBinder::bind(std::size_t pos, const DynamicAny& val, Direction dir)
{
	if(val.type() == typeid(Int32))
		bind(pos, val.extract<Int32>(), dir);
	else if(val.type() == typeid(std::string))
		bind(pos, val.extract<std::string>(), dir);
	else if (val.type() == typeid(bool))
		bind(pos, val.extract<bool>(), dir);
	else if(val.type() == typeid(char))
		bind(pos, val.extract<char>(), dir);
	else if(val.type() == typeid(Int8))
		bind(pos, val.extract<Int8>(), dir);
	else if(val.type() == typeid(UInt8))
		bind(pos, val.extract<UInt8>(), dir);
	else if(val.type() == typeid(Int16))
		bind(pos, val.extract<Int16>(), dir);
	else if(val.type() == typeid(UInt16))
		bind(pos, val.extract<UInt16>(), dir);
	else if(val.type() == typeid(UInt32))
		bind(pos, val.extract<UInt32>(), dir);
	else if(val.type() == typeid(Int64))
		bind(pos, val.extract<Int64>(), dir);
	else if(val.type() == typeid(UInt64))
		bind(pos, val.extract<UInt64>(), dir);
	else if(val.type() == typeid(float))
		bind(pos, val.extract<float>(), dir);
	else if(val.type() == typeid(double))
		bind(pos, val.extract<double>(), dir);
	else if(val.type() == typeid(DateTime))
		bind(pos, val.extract<DateTime>(), dir);
	else if(val.type() == typeid(BLOB))
		bind(pos, val.extract<BLOB>(), dir);
#ifndef POCO_LONG_IS_64_BIT
	else if(val.type() == typeid(long))
		bind(pos, val.extract<long>(), dir);
#endif
	else
		throw UnknownTypeException(std::string(val.type().name()));
}


} } // namespace Poco::Data

//
// MulticastSocketTest.cpp
//
// $Id: //poco/1.1.0/Net/testsuite/src/MulticastSocketTest.cpp#2 $
//
// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "MulticastSocketTest.h"
#include "CppUnit/TestCaller.h"
#include "CppUnit/TestSuite.h"
#include "MulticastEchoServer.h"
#include "Net/MulticastSocket.h"
#include "Net/SocketAddress.h"
#include "Net/NetException.h"
#include "Foundation/Timespan.h"
#include "Foundation/Stopwatch.h"


using Net::Socket;
using Net::MulticastSocket;
using Net::SocketAddress;
using Net::IPAddress;
using Foundation::Timespan;
using Foundation::Stopwatch;
using Foundation::TimeoutException;
using Foundation::InvalidArgumentException;
using Foundation::IOException;


MulticastSocketTest::MulticastSocketTest(const std::string& name): CppUnit::TestCase(name)
{
}


MulticastSocketTest::~MulticastSocketTest()
{
}


void MulticastSocketTest::testMulticast()
{
	MulticastEchoServer echoServer;
	MulticastSocket ms;
	int n = ms.sendTo("hello", 5, echoServer.group());
	assert (n == 5);
	char buffer[256];
	n = ms.receiveBytes(buffer, sizeof(buffer));
	assert (n == 5);
	assert (std::string(buffer, n) == "hello");
	ms.close();
}


void MulticastSocketTest::setUp()
{
}


void MulticastSocketTest::tearDown()
{
}


CppUnit::Test* MulticastSocketTest::suite()
{
	CppUnit::TestSuite* pSuite = new CppUnit::TestSuite("MulticastSocketTest");

	CppUnit_addTest(pSuite, MulticastSocketTest, testMulticast);

	return pSuite;
}

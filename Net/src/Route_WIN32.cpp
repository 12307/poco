//
// Route_WIN32.cpp
//
// $Id: //poco/1.4/Foundation/src/Route_WIN32.cpp#2 $
//
// Library: Net
// Package: NetCore
// Module:  Route
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Error.h"


namespace Poco {
namespace Net {


static unsigned int getCompleteMetric(PMIB_IPFORWARD_ROW2 pIp2)
	/// The route metric specified in the Metric member of the MIB_IPFORWARD_ROW2 structure 
	/// represents just the route metric offset. The complete metric is a combination of this 
	/// route metric offset added to the interface metric specified in the Metric member of 
	/// the MIB_IPINTERFACE_ROW structure of the associated interface.
{
	MIB_IPINTERFACE_ROW intfcRow;
	intfcRow.InterfaceLuid = pIp2->InterfaceLuid;
	intfcRow.InterfaceIndex = pIp2->InterfaceIndex;
	intfcRow.Family = pIp2->DestinationPrefix.Prefix.si_family;
	DWORD ret = GetIpInterfaceEntry(&intfcRow);
	if (NO_ERROR == ret) return pIp2->Metric + intfcRow.Metric;

	std::string error;
	switch (ret)
	{
	case ERROR_FILE_NOT_FOUND:
		throw RuntimeException("Unknown network interface LUID or interface index");
	case ERROR_INVALID_PARAMETER:
		throw RuntimeException("An invalid parameter was passed to the function.");
	case ERROR_NOT_FOUND:
		throw RuntimeException("Network interface/family mismatch.");
	default:
		throw RuntimeException(Error::getMessage(ret));
	}
}


Route::RouteList Route::list(IPAddress::Family family)
{
	std::time_t now;
	PMIB_IPFORWARD_TABLE2 pIpForwardTable2 = 0;

	if (GetIpForwardTable2(((family == IPAddress::IPv4) ? AF_INET : AF_INET6), &pIpForwardTable2) != NO_ERROR)
		throw RuntimeException("Couldn't fetch routing table.");

	::time(&now);

	RouteList list;

	for (unsigned i = 0; i < pIpForwardTable2->NumEntries; ++i)
	{
		PMIB_IPFORWARD_ROW2 pIp2 = &pIpForwardTable2->Table[i];
		IPAddress::Family family2 = (pIp2->DestinationPrefix.Prefix.si_family == AF_INET ? IPAddress::IPv4 : IPAddress::IPv6);

		IPAddress dest(*(struct sockaddr *)&pIp2->DestinationPrefix.Prefix);
		IPAddress netmask(pIp2->DestinationPrefix.PrefixLength, family2);
		IPAddress nexthop(*(struct sockaddr *)&pIp2->NextHop);

		Route route(dest, netmask, nexthop, pIp2->InterfaceIndex, nexthop.isWildcard() ? ROUTE_DIRECT : ROUTE_INDIRECT);
		
		route.setMetric(getCompleteMetric(pIp2));
		route.setAge(now - pIp2->Age);
		route.setProto((RouteProto) pIp2->Protocol);

		list.push_back(route);
	}

	FreeMibTable(pIpForwardTable2);

	return list;
}


}} // namespace Poco::Net

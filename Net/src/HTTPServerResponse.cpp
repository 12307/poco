//
// HTTPServerResponse.cpp
//
// $Id: //poco/1.1.0/Net/src/HTTPServerResponse.cpp#2 $
//
// Library: Net
// Package: HTTPServer
// Module:  HTTPServerResponse
//
// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Net/HTTPServerResponse.h"
#include "Net/HTTPServerSession.h"
#include "Net/HTTPHeaderStream.h"
#include "Net/HTTPStream.h"
#include "Net/HTTPFixedLengthStream.h"
#include "Net/HTTPChunkedStream.h"
#include "Foundation/File.h"
#include "Foundation/Timestamp.h"
#include "Foundation/NumberFormatter.h"
#include "Foundation/StreamCopier.h"
#include "Foundation/Exception.h"
#include <fstream>


using Foundation::File;
using Foundation::Timestamp;
using Foundation::NumberFormatter;
using Foundation::StreamCopier;
using Foundation::OpenFileException;


Net_BEGIN


HTTPServerResponse::HTTPServerResponse(HTTPServerSession& session):
	_session(session),
	_pStream(0)
{
}


HTTPServerResponse::~HTTPServerResponse()
{
	delete _pStream;
}


void HTTPServerResponse::sendContinue()
{
	HTTPHeaderOutputStream hs(_session);
	hs << getVersion() << " 100 Continue\r\n";
}


std::ostream& HTTPServerResponse::send()
{
	poco_assert (!_pStream);

	if (getChunkedTransferEncoding())
	{
		_pStream = new HTTPChunkedOutputStream(_session);
	}
	else if (getContentLength() != HTTPMessage::UNKNOWN_CONTENT_LENGTH)
	{
		_pStream = new HTTPFixedLengthOutputStream(_session, getContentLength());
	}
	else
	{
		_pStream = new HTTPOutputStream(_session);
		setKeepAlive(false);
	}
	HTTPHeaderOutputStream hs(_session);
	write(hs);

	return *_pStream;
}


void HTTPServerResponse::sendFile(const std::string& path, const std::string& mediaType)
{
	poco_assert (!_pStream);

	File f(path);
	Timestamp dateTime    = f.getLastModified();
	File::FileSize length = f.getSize();
	setDate(dateTime);
	setContentLength((int) length);
	setContentType(mediaType);

	std::ifstream istr(path.c_str(), std::ios::binary | std::ios::in);
	if (istr.good())
	{
		send();
		StreamCopier::copyStream(istr, *_pStream);
	}
	else throw OpenFileException(path);
}


void HTTPServerResponse::redirect(const std::string& uri)
{
	poco_assert (!_pStream);

	setStatusAndReason(HTTPResponse::HTTP_FOUND);
	set("Location", uri);

	HTTPHeaderOutputStream hs(_session);
	write(hs);
}


void HTTPServerResponse::requireAuthentication(const std::string& realm)
{
	poco_assert (!_pStream);
	
	setStatusAndReason(HTTPResponse::HTTP_UNAUTHORIZED);
	std::string auth("Basic realm=\"");
	auth.append(realm);
	auth.append("\"");
	set("WWW-Authenticate", auth);
}


Net_END

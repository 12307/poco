//
// Socket.cpp
//
// $Id: //poco/1.3/Net/src/Socket.cpp#4 $
//
// Library: Net
// Package: Sockets
// Module:  Socket
//
// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Net/Socket.h"
#include "Poco/Net/StreamSocketImpl.h"
#include "Poco/Timestamp.h"
#include <algorithm>
#include <string.h> // FD_SET needs memset on some platforms, so we can't use <cstring>


#if defined(POCO_HAVE_FD_EPOLL)
	#include <sys/epoll.h>
#elif defined(POCO_HAVE_FD_KQUEUE)
	#include <sys/types.h>
	#include <sys/event.h>
	#include <sys/time.h>
#elif defined(POCO_HAVE_FD_POLL)
	#include "Poco/SharedPtr.h"
	#include <poll.h>
	typedef Poco::SharedPtr<pollfd, 
		Poco::ReferenceCounter, 
		Poco::ReleaseArrayPolicy<pollfd> > SharedPollArray;
#endif


namespace Poco {
namespace Net {


Socket::Socket():
	_pImpl(new StreamSocketImpl)
{
}


Socket::Socket(SocketImpl* pImpl):
	_pImpl(pImpl)
{
	poco_check_ptr (_pImpl);
}


Socket::Socket(const Socket& socket):
	_pImpl(socket._pImpl)
{
	poco_check_ptr (_pImpl);

	_pImpl->duplicate();
}

	
Socket& Socket::operator = (const Socket& socket)
{
	if (&socket != this)
	{
		if (_pImpl) _pImpl->release();
		_pImpl = socket._pImpl;
		if (_pImpl) _pImpl->duplicate();
	}
	return *this;
}


Socket::~Socket()
{
	_pImpl->release();
}


int Socket::select(SocketList& readList, SocketList& writeList, SocketList& exceptList, const Poco::Timespan& timeout)
{
#if defined(POCO_HAVE_FD_EPOLL)
#warning "Poco use EPOLL for Socket::select"
	//
	// Size of epoll queue
	//
	int epoll_size = readList.size() + writeList.size() + exceptList.size();

	//
	// If nothing to do, return 0
	//
	if (epoll_size == 0)
		return 0;

	//
	// Fill epoll queue
	//
	int epollfd = -1;
	{
		//
		// Epoll events to be filled
		//
		struct epoll_event events_in[epoll_size];
		memset(events_in, 0, sizeof (events_in));

		//
		// Current epoll event to be filled
		//
		struct epoll_event* event_last = events_in;

		for (SocketList::iterator it = readList.begin(); it != readList.end(); ++it)
		{
			if (it->sockfd() != POCO_INVALID_SOCKET)
			{
				//
				// Try to find file descriptor in epoll events
				//
				struct epoll_event* e = events_in;
				for (; e != event_last; ++e)
				{
					if (reinterpret_cast<Socket*> (e->data.ptr)->sockfd() == it->sockfd())
						break;
				}

				//
				// If not found allocate new epoll event
				//
				if (e == event_last)
				{
					e->data.ptr = &(*it);

					++event_last;
				}

				e->events |= EPOLLIN;
			}
		}

		for (SocketList::iterator it = writeList.begin(); it != writeList.end(); ++it)
		{
			if (it->sockfd() != POCO_INVALID_SOCKET)
			{
				//
				// Try to find file descriptor in epoll events
				//
				struct epoll_event* e = events_in;
				for (; e != event_last; ++e)
				{
					if (reinterpret_cast<Socket*> (e->data.ptr)->sockfd() == it->sockfd())
						break;
				}

				//
				// If not found allocate new epoll event
				//
				if (e == event_last)
				{
					e->data.ptr = &(*it);

					++event_last;
				}

				e->events |= EPOLLOUT;
			}
		}

		for (SocketList::iterator it = exceptList.begin(); it != exceptList.end(); ++it)
		{
			if (it->sockfd() != POCO_INVALID_SOCKET)
			{
				//
				// Try to find file descriptor in epoll events
				//
				struct epoll_event* e = events_in;
				for (; e != event_last; ++e)
				{
					if (reinterpret_cast<Socket*> (e->data.ptr)->sockfd() == it->sockfd())
						break;
				}

				//
				// If not found allocate new epoll event
				//
				if (e == event_last)
				{
					e->data.ptr = &(*it);

					++event_last;
				}

				e->events |= EPOLLERR;
			}
		}

		//
		// Recalculate real epoll queue size
		//
		epoll_size = event_last - events_in;

		//
		// Allocate epoll queue
		//
		epollfd = epoll_create(epoll_size);
		if (epollfd < 0)
		{
			char buf[4000];
			strerror_r(errno, buf, sizeof(buf));

			SocketImpl::error(std::string("Can't create epoll - ") + buf);
		}

		//
		// Place epoll events into epoll queue
		//
		for (struct epoll_event* e = events_in; e != event_last; ++e)
		{
			if (epoll_ctl(epollfd, EPOLL_CTL_ADD, reinterpret_cast<Socket*> (e->data.ptr)->sockfd(), e) < 0)
			{
				char buf[4000];
				strerror_r(errno, buf, sizeof(buf));

				::close(epollfd);
				SocketImpl::error(std::string("Can't insert socket to epoll - ") + buf);
			}
		}
	}

	struct epoll_event events_out[epoll_size];
	memset(events_out, 0, sizeof (events_out));

	Poco::Timespan remainingTime(timeout);
	int rc;
	do
	{
		Poco::Timestamp start;
		rc = epoll_wait(epollfd, events_out, epoll_size, remainingTime.totalMilliseconds());
		if (rc < 0 && SocketImpl::lastError() == POCO_EINTR)
		{
 			Poco::Timestamp end;
			Poco::Timespan waited = end - start;
			if (waited < remainingTime)
				remainingTime -= waited;
			else
				remainingTime = 0;
		}
	}
	while (rc < 0 && SocketImpl::lastError() == POCO_EINTR);

	//
	// Close epoll queue
	//
	::close(epollfd);

	if (rc < 0) SocketImpl::error();

 	SocketList readyReadList;
	SocketList readyWriteList;
	SocketList readyExceptList;
	for (int n = 0; n < rc; ++n)
	{
		if (events_out[n].events & EPOLLERR)
			readyExceptList.push_back(*reinterpret_cast<Socket*>(events_out[n].data.ptr));
		if (events_out[n].events & EPOLLIN)
			readyReadList.push_back(*reinterpret_cast<Socket*>(events_out[n].data.ptr));
		if (events_out[n].events & EPOLLOUT)
			readyWriteList.push_back(*reinterpret_cast<Socket*>(events_out[n].data.ptr));
	}
	std::swap(readList, readyReadList);
	std::swap(writeList, readyWriteList);
	std::swap(exceptList, readyExceptList);
	return readList.size() + writeList.size() + exceptList.size();

#elif defined(POCO_HAVE_FD_KQUEUE)
#warning "Poco use KQUEUE for Socket::select"
	//
	// Size of kqueue queue
	//
	int kqueue_size = readList.size() + writeList.size() + exceptList.size();

	//
	// If nothing to do, return 0
	//
	if (kqueue_size == 0)
		return 0;

	//
	// Create kevent queue
	//
	int kqueuefd = kqueue();
	if (kqueuefd < 0)
	{
		char buf[4000];
		strerror_r(errno, buf, sizeof(buf));

		SocketImpl::error(std::string("Can't create kqueue - ") + buf);
	}

	//
	// Allocate in/out kevent queues
	//
	struct kevent events_in[kqueue_size];
	struct kevent events_out[kqueue_size];
	memset(&events_in , 0, sizeof(events_in));
	memset(&events_out, 0, sizeof(events_out));

	//
	// Add sockets to events_in list for appropriate event
	//
	for (size_t i = 0; i < readList.size(); ++i)
	{
		if (readList[i].sockfd () != POCO_INVALID_SOCKET)
		{
			EV_SET(events_in + i, readList[i].sockfd (), EVFILT_READ, EV_ADD|EV_CLEAR, 0, 0, &readList[i]);
		}
	}
	for (size_t i = 0; i < writeList.size(); ++i)
	{
		if (writeList[i].sockfd () != POCO_INVALID_SOCKET)
		{
			EV_SET(events_in + readList.size () + i, writeList[i].sockfd (), EVFILT_WRITE, EV_ADD|EV_CLEAR, 0, 0, &writeList[i]);
		}
	}
	for (size_t i = 0; i < exceptList.size(); ++i)
	{
		if (exceptList[i].sockfd () != POCO_INVALID_SOCKET)
		{
			EV_SET(events_in + readList.size () + writeList.size () + i, exceptList[i].sockfd (), EVFILT_READ/*FIXME*/, EV_ADD|EV_CLEAR, 0, 0, &exceptList[i]);
		}
	}

	Poco::Timespan remainingTime(timeout);
	int rc;
	do
	{
		struct timespec ts;
		ts.tv_sec  = (long)remainingTime.totalSeconds();
		ts.tv_nsec = (long)remainingTime.useconds();

		Poco::Timestamp start;
		rc = kevent(kqueuefd, events_in, kqueue_size, events_out, kqueue_size, &ts);
		if (rc < 0 && SocketImpl::lastError() == POCO_EINTR)
		{
 			Poco::Timestamp end;
			Poco::Timespan waited = end - start;
			if (waited < remainingTime)
				remainingTime -= waited;
			else
				remainingTime = 0;
		}
	}
	while (rc < 0 && SocketImpl::lastError() == POCO_EINTR);

	//
	// Close kqueue
	//
	::close(kqueuefd);

	if (rc < 0) SocketImpl::error();

 	SocketList readyReadList;
	SocketList readyWriteList;
	SocketList readyExceptList;
	for (int n = 0; n < rc; ++n)
	{
		if (events_out[n].flags & EV_ERROR)
			readyExceptList.push_back(*reinterpret_cast<Socket*>(events_out[n].udata));
		else if (events_out[n].filter == EVFILT_READ)
			readyReadList.push_back(*reinterpret_cast<Socket*>(events_out[n].udata));
		else if (events_out[n].filter == EVFILT_WRITE)
			readyWriteList.push_back(*reinterpret_cast<Socket*>(events_out[n].udata));
	}
	std::swap(readList, readyReadList);
	std::swap(writeList, readyWriteList);
	std::swap(exceptList, readyExceptList);
	return readList.size() + writeList.size() + exceptList.size();

#elif defined(POCO_HAVE_FD_POLL)
#warning "Poco use POLL for Socket::select"
	nfds_t nfd = readList.size() + writeList.size() + exceptList.size();
	if (0 == nfd) return 0;

	SharedPollArray pPollArr = new pollfd[nfd];

	int idx = 0;
	for (SocketList::iterator it = readList.begin(); it != readList.end(); ++it)
	{
		pPollArr[idx].fd = int(it->sockfd());
		pPollArr[idx++].events |= POLLIN;
	}

	SocketList::iterator begR = readList.begin();
	SocketList::iterator endR = readList.end();
	for (SocketList::iterator it = writeList.begin(); it != writeList.end(); ++it)
	{
		SocketList::iterator pos = std::find(begR, endR, *it);
		if (pos != endR) 
		{
			pPollArr[pos-begR].events |= POLLOUT;
			--nfd;
		}
		else
		{
			pPollArr[idx].fd = int(it->sockfd());
			pPollArr[idx++].events |= POLLOUT;
		}
	}

	SocketList::iterator begW = writeList.begin();
	SocketList::iterator endW = writeList.end();
	for (SocketList::iterator it = exceptList.begin(); it != exceptList.end(); ++it)
	{
		SocketList::iterator pos = std::find(begR, endR, *it);
		if (pos != endR) --nfd;
		else
		{
			SocketList::iterator pos = std::find(begW, endW, *it);
			if (pos != endW) --nfd;
			else pPollArr[idx++].fd = int(it->sockfd());
		}
	}

	Poco::Timespan remainingTime(timeout);
	int rc;
	do
	{
		Poco::Timestamp start;
		rc = ::poll(pPollArr, nfd, timeout.totalMilliseconds());
		if (rc < 0 && SocketImpl::lastError() == POCO_EINTR)
		{
			Poco::Timestamp end;
			Poco::Timespan waited = end - start;
			if (waited < remainingTime) remainingTime -= waited;
			else remainingTime = 0;
		}
	}
	while (rc < 0 && SocketImpl::lastError() == POCO_EINTR);
	if (rc < 0) SocketImpl::error();

	SocketList readyReadList;
	SocketList readyWriteList;
	SocketList readyExceptList;

	SocketList::iterator begE = exceptList.begin();
	SocketList::iterator endE = exceptList.end();
	for (int idx = 0; idx < nfd; ++idx)
	{
		SocketList::iterator slIt = std::find_if(begR, endR, Socket::FDCompare(pPollArr[idx].fd));
		if (POLLIN & pPollArr[idx].revents && slIt != endR) readyReadList.push_back(*slIt);
		slIt = std::find_if(begW, endW, Socket::FDCompare(pPollArr[idx].fd));
		if (POLLOUT & pPollArr[idx].revents && slIt != endW) readyWriteList.push_back(*slIt);
		slIt = std::find_if(begE, endE, Socket::FDCompare(pPollArr[idx].fd));
		if (POLLERR & pPollArr[idx].revents && slIt != endE) readyExceptList.push_back(*slIt);
	}
	std::swap(readList, readyReadList);
	std::swap(writeList, readyWriteList);
	std::swap(exceptList, readyExceptList);
	
//	return rc;
	return readList.size() + writeList.size() + exceptList.size();

#else
#warning "Poco use SELECT for Socket::select"
	fd_set fdRead;
	fd_set fdWrite;
	fd_set fdExcept;
	int nfd = 0;
	FD_ZERO(&fdRead);
	for (SocketList::const_iterator it = readList.begin(); it != readList.end(); ++it)
	{
		if (int(it->sockfd()) > nfd)
			nfd = int(it->sockfd());
		FD_SET(it->sockfd(), &fdRead);
	}
	FD_ZERO(&fdWrite);
	for (SocketList::const_iterator it = writeList.begin(); it != writeList.end(); ++it)
	{
		if (int(it->sockfd()) > nfd)
			nfd = int(it->sockfd());
		FD_SET(it->sockfd(), &fdWrite);
	}
	FD_ZERO(&fdExcept);
	for (SocketList::const_iterator it = exceptList.begin(); it != exceptList.end(); ++it)
	{
		if (int(it->sockfd()) > nfd)
			nfd = int(it->sockfd());
		FD_SET(it->sockfd(), &fdExcept);
	}
	if (nfd == 0) return 0;
	Poco::Timespan remainingTime(timeout);
	int rc;
	do
	{
		struct timeval tv;
		tv.tv_sec  = (long) remainingTime.totalSeconds();
		tv.tv_usec = (long) remainingTime.useconds();
		Poco::Timestamp start;
		rc = ::select(nfd + 1, &fdRead, &fdWrite, &fdExcept, &tv);
		if (rc < 0 && SocketImpl::lastError() == POCO_EINTR)
		{
			Poco::Timestamp end;
			Poco::Timespan waited = end - start;
			if (waited < remainingTime)
				remainingTime -= waited;
			else
				remainingTime = 0;
		}
	}
	while (rc < 0 && SocketImpl::lastError() == POCO_EINTR);
	if (rc < 0) SocketImpl::error();
	
	SocketList readyReadList;
	for (SocketList::const_iterator it = readList.begin(); it != readList.end(); ++it)
	{
		if (FD_ISSET(it->sockfd(), &fdRead))
			readyReadList.push_back(*it);
	}
	std::swap(readList, readyReadList);
	SocketList readyWriteList;
	for (SocketList::const_iterator it = writeList.begin(); it != writeList.end(); ++it)
	{
		if (FD_ISSET(it->sockfd(), &fdWrite))
			readyWriteList.push_back(*it);
	}
	std::swap(writeList, readyWriteList);
	SocketList readyExceptList;
	for (SocketList::const_iterator it = exceptList.begin(); it != exceptList.end(); ++it)
	{
		if (FD_ISSET(it->sockfd(), &fdExcept))
			readyExceptList.push_back(*it);
	}
	std::swap(exceptList, readyExceptList);
	 
	return rc;
#endif
}


} } // namespace Poco::Net
